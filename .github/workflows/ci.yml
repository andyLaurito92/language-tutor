name: CI - Code Quality and Testing

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarQube
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-pyaudio
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_no_audio.txt
        pip install flake8 black isort mypy pylint pytest pytest-cov
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff .
    
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff .
    
    - name: Linting (flake8)
      run: |
        flake8 .
    
    - name: Advanced linting (pylint)
      run: |
        pylint src/ app.py cli_tutor.py --fail-under=8.0
      continue-on-error: true  # Don't fail build on pylint warnings
    
    - name: Type checking (mypy)
      run: |
        mypy src/ --ignore-missing-imports
      continue-on-error: true  # Don't fail build on type hints initially
    
    - name: Run tests with coverage
      run: |
        python -m pytest test_*.py --cov=src --cov-report=xml --cov-report=term-missing
      continue-on-error: true  # Tests may fail due to missing dependencies
    
    - name: SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      if: env.SONAR_TOKEN != null
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      continue-on-error: true  # Don't fail if SonarQube is not configured
    
    - name: Install SonarScanner (fallback)
      if: env.SONAR_TOKEN == null
      run: |
        echo "SonarQube not configured - skipping analysis"
        echo "To enable SonarQube:"
        echo "1. Set SONAR_TOKEN secret in repository settings"
        echo "2. Set SONAR_HOST_URL secret (e.g., https://sonarcloud.io)"

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install safety
      run: pip install safety
    
    - name: Security scan
      run: |
        safety check -r requirements.txt --continue-on-error
        safety check -r requirements_no_audio.txt --continue-on-error
      continue-on-error: true